@using System.ComponentModel

<Panel>
    <Header>
        <input type="checkbox" @bind="Group.Selected" >@Group.Name
    </Header>
    <Body>
        <div class="container slim">
            <div class="row slim">
                @foreach(var item in Group
                        .Where(x => x.IsVisible()))
                {
                    <div class="@ItemClass">
                        <CascadingValue Value="item" Name="Item">
                            <SelectableItem DeleteItemCallback="@DeleteItem" />
                        </CascadingValue>
                    </div>
                }
            </div>
        </div>
    </Body>
</Panel>

@typeparam T where T : SelectableComponentBase<T>
@code {
    [CascadingParameter(Name = "Group")]
    public OptionGroup<T> Group 
    { 
        get
        {
            return _group;
        }
        set
        {
            _group = value;
            value.PropertyChanged += PropertyChanged;
        }
    }

    [Parameter]
    public string ItemClass { get; set; } = "col-6";

    private OptionGroup<T> _group;

    public void DeleteItem(string itemName)
    {
        Group.Remove(itemName);
    }

    public void PropertyChanged (object sender, PropertyChangedEventArgs args) 
    {
        // If an assigned weight changes for one of the children then we'll need to recalculate the others.
        if(args.PropertyName == $"Child_{nameof(INamedComponent.AssignedWeight)}")
        {
            this.StateHasChanged();
        }
    }

}