@page "/"

@using SiRandomizer.Data
@using SiRandomizer.Services
@using System.Text.Json
@using System.Text.Json.Serialization

@inject ConfigurationService ConfigurationService
@inject SetupGenerator SetupGenerator
@inject IJSRuntime JSRuntime

<h2>Spirit Island Randomizer</h2>

<div class="container">
@if (config == null)
{
  <div class="row">
    <div class="col-12">
        <em>Loading...</em>
    </div>
  </div>
}
else if (setup == null)
{    
    <CascadingValue Value="config" Name="Config">
    <EditForm Model=@config OnValidSubmit="GenerateSetupAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-4">
                <Panel>
                    <Header>
                        Player Count
                    </Header>
                    <Body>    
                        <InputNumber class="numeric-2" @bind-Value=config.Players/>
                    </Body>
                </Panel>
            </div>
            <div class="col-4">
                <Panel>
                    <Header>
                        Difficulty
                    </Header>
                    <Body>
                        <span>Min<InputNumber class="numeric-2" @bind-Value=config.MinDifficulty/></span>
                        <span>Max<InputNumber class="numeric-2" @bind-Value=config.MaxDifficulty/></span>
                    </Body>
                </Panel>
            </div>
            <div class="col-4">
                <Panel>
                    <Header>
                        Options
                    </Header>
                    <Body>
                        <label>
                            <InputSelect @bind-Value="@config.CombinedAdversaries" >                            
                                @foreach (var choice in Enum.GetValues(typeof(OptionChoice)))
                                {                                
                                    <option value="@choice">@choice</option>
                                }
                            </InputSelect> Combined Adversaries
                        </label>
                        <label>
                            <InputSelect @bind-Value="@config.RandomThematicBoards" >                            
                                @foreach (var choice in Enum.GetValues(typeof(OptionChoice)))
                                {                                
                                    <option value="@choice">@choice</option>
                                }
                            </InputSelect> Random Thematic Boards
                        </label>
                        <label>
                            <InputSelect @bind-Value="@config.AdditionalBoard" >                            
                                @foreach (var choice in Enum.GetValues(typeof(OptionChoice)))
                                {                                
                                    <option value="@choice">@choice</option>
                                }
                            </InputSelect> Additional Board
                        </label>
                        <label>
                            <InputSelect @bind-Value="@config.ImbalancedArcadeBoards" >                            
                                @foreach (var choice in Enum.GetValues(typeof(OptionChoice)))
                                {                                
                                    <option value="@choice">@choice</option>
                                }
                            </InputSelect> Imbalanced Arcade Boards
                        </label>
                    </Body>
                </Panel>
            </div>
        </div>  

        <div class="row">
            <div class="col-12">
                <CascadingValue Value="config.Expansions" Name="Group">
                    <SelectableGroup T=Expansion />
                </CascadingValue>
            </div>
        </div>
        
        <div class="row">
            <div class="col-12 @config.SpiritsPanelClass">
                <CascadingValue Value="config.Spirits" Name="Group">
                    <SelectableGroup T=Spirit />
                </CascadingValue>
            </div>
        </div>
        
        <div class="row">
            <div class="col-6 @config.MapsPanelClass">
                <CascadingValue Value="config.Maps" Name="Group">
                    <SelectableGroup T=Map />
                </CascadingValue>
            </div>
            <div class="col-6 @config.BoardsPanelClass">
                <CascadingValue Value="config.Boards" Name="Group">
                    <SelectableGroup T=Board />
                </CascadingValue>
            </div>
        </div>
        
        <div class="row">
            <div class="col-12 @config.ScenariosPanelClass">
                <CascadingValue Value="config.Scenarios" Name="Group">
                    <SelectableGroup T=Scenario />
                </CascadingValue>
            </div>
        </div>

        <div class="row">
            <div class="col-12 @config.AdversariesPanelClass">
                <CascadingValue Value="config.Adversaries" Name="Group">
                    <SelectableGroup T=Adversary Columns=4 />
                </CascadingValue>
            </div>
        </div>

        <ValidationSummary />

        <div class="row">
            <div class="col-12">
                <button type="submit">
                    Generate
                </button>
            </div>
        </div>
    </EditForm>
    </CascadingValue>
} 
else
{
    <div class="row">
        <div class="col-6">
            <Panel>
                <Header>
                    Difficulty
                </Header>
                <Body>
                    <span class="si-tag">@setup.Setup.Difficulty</span>
                </Body>
            </Panel>
        </div>
        <div class="col-6">
            <Panel>
                <Header>
                    Map
                </Header>
                <Body>
                    <label>@setup.Setup.Map.Name</label>
                </Body>
            </Panel>
        </div>
        <div class="col-6">
            <Panel>
                <Header>
                    Spirits and Starting Boards
                </Header>
                <Body>
                    @foreach (var board in setup.Setup.BoardSetups)
                    {
                        <label>Board <span class="si-tag">@board.Board.Name</span> - @(board.Spirit == null ? "No Spirit" : board.Spirit.Name)</label><br>
                    }
                </Body>
            </Panel>
        </div>
        <div class="col-6">
            <Panel>
                <Header>
                    Scenario
                </Header>
                <Body>
                    <label>@setup.Setup.Scenario.Name</label>
                </Body>
            </Panel>
        </div>
        <div class="col-6">
            <Panel>
                <Header>
                    Adversary
                </Header>
                <Body>
                    <label>@setup.Setup.LeadingAdversary.Adversary.Name - @setup.Setup.LeadingAdversary.Name</label><br>
                    @if(@setup.Setup.HasSupportingAdversary)
                    {
                        <label>Supported by:</label><br>
                        <label>@setup.Setup.SupportingAdversary.Adversary.Name - @setup.Setup.SupportingAdversary.Name</label>
                    }
                </Body>
            </Panel>
        </div>
        <div class="col-12">
            <Panel>
                <Header>
                    Stats
                </Header>
                <Body>
                    <label><span class="si-tag">@setup.DifficultyOptionsConsidered</span> valid configurations for the selected difficulty range
                        multiplied by <span class="si-tag">@setup.BoardSetupOptionsConsidered</span> valid board/spirit options equals 
                        <span class="si-tag">@(setup.BoardSetupOptionsConsidered*setup.DifficultyOptionsConsidered)</span> total combinations.</label>
                </Body>
            </Panel>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <button @onclick="ClearSetup">
                Edit Setup
            </button>
            <button @onclick="GenerateSetupAsync">
                Re-Generate
            </button>
        </div>
    </div>
}
</div>

@code {
    private OverallConfiguration config;
    private SetupResult setup;

    private const string StorageName = "si-randomizer-config";


    protected override async Task OnInitializedAsync()
    {
        config = await ConfigurationService.GetConfigurationAsync();
        config.Expansions.PropertyChanged += (sender, args) => InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // Try to get configuration from local storage
            var jsonConfig = await JSRuntime.InvokeAsync<string>("localStorage.getItem", StorageName);
            if(string.IsNullOrEmpty(jsonConfig) == false)
            {
                try
                {
                    var savedSettings = JsonSerializer.Deserialize<OverallConfiguration>(jsonConfig);
                    config.TakeSettingsFrom(savedSettings);
                    // configuration has changed so let the system know to re-render.
                    await InvokeAsync(StateHasChanged);
                }
                catch(Exception)
                {
                    // Don't worry about the error - we'll just use the new config instead.
                }
            }
        }
    }

    protected async Task GenerateSetupAsync()
    {
        var jsonConfig = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageName, jsonConfig);
        setup = SetupGenerator.Generate(config);
    }

    protected void ClearSetup()
    {
        setup = null;
    }
}
