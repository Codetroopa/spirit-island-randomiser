@using Data
@using System.Collections;
@using SiRandomizer.Extensions;

<input type="checkbox" @bind="Item.Selected">@Item.Name

@if(Item is IExpansionContent itemEx && 
    itemEx.Expansion != null &&
    string.IsNullOrEmpty(itemEx.Expansion.Tag) == false) {
    <span class="si-tag expansion-tag-@itemEx.Expansion.Tag">@itemEx.Expansion.Tag</span>
}
@if(Item is IDifficultyModifier difficultyMod) {
    <span class="si-tag">+@difficultyMod.DifficultyModifier</span>
}
@if(children != null && children.Count > 0) {
    <table>
        @foreach (var child in children) {
            <tr>
                <CascadingValue Value="child" Name="Item">
                    <td class="child-item"><SelectableItem /></td>
                </CascadingValue>
            </tr>
        }
    </table>
}

@code {
    [CascadingParameter(Name = "Item")]
    public INamedComponent Item 
    { 
        set 
        {
            var type = value.GetType();
            // If this item is a collection of INamedComponent instances
            // then set the 'children' variable to ensure they are rendered too.
            if(type.IsNamedComponentCollection())
            {
                children = (value as IEnumerable)
                    .Cast<INamedComponent>()
                    .Where(x => x.IsVisible())
                    .ToList();
            }
            values = value; 
        }
        get { return values; } 
    }

    private INamedComponent values;
    private List<INamedComponent> children;        
}